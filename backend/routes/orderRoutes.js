const express = require("express");
const router = express.Router();
const Order = require("../models/Order");

// üü¢ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (theo email)
// üü¢ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
router.post("/add", async (req, res) => {
  try {
    const { email, item } = req.body;
    if (!email || !item) {
      return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c s·∫£n ph·∫©m" });
    }

    let order = await Order.findOne({ email });

    if (!order) {
      order = new Order({ email, items: [item] });
    } else {
      const exist = order.items.find(
        (i) =>
          String(i.phoneId) === String(item.phoneId) &&
          i.color === item.color &&
          i.storage === item.storage
      );

      if (exist) {
        exist.quantity += item.quantity || 1;
      } else {
        order.items.push(item); // ‚úÖ item c√≥ image
      }
    }

    await order.save();
    res.json({ items: order.items, total: order.total });
  } catch (err) {
    console.error("‚ùå L·ªói th√™m s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "L·ªói server khi th√™m s·∫£n ph·∫©m" });
  }
});


// üü† C·ªông / tr·ª´ s·ªë l∆∞·ª£ng (delta)
router.put("/change-quantity", async (req, res) => {
  try {
    const { email, phoneId, color, storage, delta } = req.body;

    let order = await Order.findOne({ email });
    if (!order) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    const item = order.items.find(
      (i) =>
        String(i.phoneId) === String(phoneId) &&
        i.color === color &&
        i.storage === storage
    );
    if (!item) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

    item.quantity += delta;

    if (item.quantity <= 0) {
      // N·∫øu s·ªë l∆∞·ª£ng <= 0 th√¨ xo√° s·∫£n ph·∫©m ƒë√≥
      order.items = order.items.filter(
        (i) =>
          !(
            String(i.phoneId) === String(phoneId) &&
            i.color === color &&
            i.storage === storage
          )
      );
    }

    if (order.items.length > 0) {
      order.total = order.items.reduce(
        (sum, it) => sum + it.price * it.quantity,
        0
      );
      await order.save();
      return res.json(order);
    } else {
      // N·∫øu gi·ªè h√†ng tr·ªëng ‚Üí xo√° order
      await Order.deleteOne({ email });
      return res.json({ email, items: [], total: 0 });
    }
  } catch (err) {
    console.error("‚ùå L·ªói change-quantity:", err);
    res.status(500).json({ error: "L·ªói server khi thay ƒë·ªïi s·ªë l∆∞·ª£ng" });
  }
});


router.delete("/remove", async (req, res) => {
  try {
    const { email, phoneId, color, storage } = req.body;

    let order = await Order.findOne({ email });
    if (!order) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    // X√≥a ƒë√∫ng 1 bi·∫øn th·ªÉ (theo phoneId + color + storage)
    order.items = order.items.filter(
      (i) =>
        !(
          String(i.phoneId) === String(phoneId) &&
          i.color === color &&
          i.storage === storage
        )
    );

    if (order.items.length > 0) {
      order.total = order.items.reduce(
        (sum, it) => sum + it.price * it.quantity,
        0
      );
      await order.save();
      return res.json(order);
    } else {
      await Order.deleteOne({ email });
      return res.json({ items: [] });
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "L·ªói server khi x√≥a s·∫£n ph·∫©m" });
  }
});




// üîµ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
router.put("/update-quantity", async (req, res) => {
  try {
    const { email, phoneId, quantity } = req.body;

    let order = await Order.findOne({ email });
    if (!order) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    const item = order.items.find(i => i.phoneId === phoneId);
    if (!item) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

    item.quantity = quantity;

    if (item.quantity <= 0) {
      // N·∫øu s·ªë l∆∞·ª£ng <= 0 th√¨ xo√° s·∫£n ph·∫©m
      order.items = order.items.filter(i => i.phoneId !== phoneId);
    }

    if (order.items.length > 0) {
      order.total = order.items.reduce((sum, it) => sum + it.price * it.quantity, 0);
      await order.save();
      return res.json(order);
    } else {
      // N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m -> xo√° lu√¥n order
      await Order.deleteOne({ email });
      return res.json({ message: "ƒê∆°n h√†ng ƒë√£ b·ªã x√≥a v√¨ kh√¥ng c√≤n s·∫£n ph·∫©m" });
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng" });
  }
});

// üîé L·∫•y gi·ªè h√†ng theo email
router.get("/:email", async (req, res) => {
  try {
    const { email } = req.params;
    const order = await Order.findOne({ email });
    if (!order) return res.json({ email, items: [], total: 0 });
    res.json(order);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
  }
});
// üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng
router.delete("/clear", async (req, res) => {
  try {
    const { email } = req.body;
    if (!email) return res.status(400).json({ error: "Thi·∫øu email" });

    await Order.deleteOne({ email });
    res.json({ success: true, items: [], total: 0 });
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° gi·ªè h√†ng:", err);
    res.status(500).json({ error: "L·ªói server khi xo√° gi·ªè h√†ng" });
  }
});

module.exports = router;
