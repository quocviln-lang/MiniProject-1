const express = require("express");
const PayMethod = require("../models/PayMethod.js");
const router = express.Router();

// üìå L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n c·ªßa user (k√®m email user)
router.get("/:userId", async (req, res) => {
  try {
    const methods = await PayMethod.find({ userId: req.params.userId })
      .populate("userId", "email") // l·∫•y th√™m email t·ª´ User
      .sort({ createdAt: -1 });

    res.json(methods);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n" });
  }
});

// üìå Th√™m ph∆∞∆°ng th·ª©c thanh to√°n
router.post("/", async (req, res) => {
  try {
    const { userId, type, provider, accountNumber, expiry, isDefault } = req.body;

    if (isDefault) {
      // reset c√°c default c≈© c·ªßa user n√†y
      await PayMethod.updateMany({ userId }, { isDefault: false });
    }

    const newMethod = new PayMethod({
      userId,
      type,
      provider,
      accountNumber,
      expiry,
      isDefault,
    });

    await newMethod.save();
    // populate email ngay khi th√™m m·ªõi
    const populated = await PayMethod.findById(newMethod._id).populate("userId", "email");

    res.json(populated);
  } catch (err) {
    console.error("‚ùå L·ªói th√™m ph∆∞∆°ng th·ª©c:", err);
    res.status(500).json({ error: "Kh√¥ng th√™m ƒë∆∞·ª£c ph∆∞∆°ng th·ª©c thanh to√°n" });
  }
});

// üìå C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n
router.put("/:id", async (req, res) => {
  try {
    const { isDefault, userId } = req.body;

    if (isDefault && userId) {
      await PayMethod.updateMany({ userId }, { isDefault: false });
    }

    const updated = await PayMethod.findByIdAndUpdate(req.params.id, req.body, { new: true })
      .populate("userId", "email");

    res.json(updated);
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c:", err);
    res.status(500).json({ error: "Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c ph∆∞∆°ng th·ª©c thanh to√°n" });
  }
});

// üìå X√≥a ph∆∞∆°ng th·ª©c thanh to√°n
router.delete("/:id", async (req, res) => {
  try {
    await PayMethod.findByIdAndDelete(req.params.id);
    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a ph∆∞∆°ng th·ª©c:", err);
    res.status(500).json({ error: "Kh√¥ng x√≥a ƒë∆∞·ª£c ph∆∞∆°ng th·ª©c thanh to√°n" });
  }
});

module.exports = router;
